global:
  image:
    tag: ${tag}
    registry: ${registry}
    %{ if create_pull_secret }
    pullSecrets:
    - azure-docker-registry-credentials
    %{ endif }
  openIdProvider:
    issuerUrl: ${issuer_url}
  testDataPath: https://${minio_fqdn}
  storages:
    default:
      path: https://${minio_fqdn}/${bucket}
      secretName: minio-credentials
    resultStorage:
      path: https://${minio_fqdn}/${bucket}/results
      secretName: minio-credentials
  dspaceEulaAccepted: ${dspaceEulaAccepted}
  microsoftDotnetLibraryLicenseAccepted: ${microsoftDotnetLibraryLicenseAccepted}
  databases:
    simphera:
      pgDatabase: ${simphera_db_name}
      pgHost: ${simphera_db_fqdn}
      pgUsername: ${postgresqlAdminLogin}
      pgPassword: ${postgresqlAdminPassword}
    simpheraScbtResults:
      enabled: false
      pgDatabase: ${simphera_db_name}
      pgHost: ${simphera_db_fqdn}
      pgUsername: ${postgresqlAdminLogin}
      pgPassword: ${postgresqlAdminPassword}
pgbouncer:
  certificate:
    secretName: customsslrootcertificate
managedSecrets:
  couchdb: 
    username: ${secret_couchdb_adminUsername}
    password: ${secret_couchdb_adminPassword}
  minio:
    username: ${secret_minio_accesskey}
    password: ${secret_minio_secretkey}
  postgresql:
    username: ${postgresqlAdminLogin}
    password: ${postgresqlAdminPassword}
  ivs:
    enabled: true 
  ivsS3:
    enabled: true
minio:
  ingress:
    hostname: ${minio_fqdn}
    extraTls:
    - hosts:
      - ${minio_fqdn}    
      secretName: dspace-cloud-certificate
  tls:
    secretName: dspace-cloud-certificate
  persistence:
    enabled: false
  gateway:
    enabled: true
    type: s3
    replicaCount: 2
    auth:
      s3:
        accessKey: "workaround_for_validation"
        secretKey: "workaround_for_validation"
  resources:
    requests:
      memory: 0.2Gi
  serviceAccount:
    create: false
    name: ${minio_serviceaccount}
keycloak:
  username: admin
  password: ${secret_keycloak_password}
  ingress:
    rules:
      - host: ${keycloak_fqdn}
        paths:
          - /
    tls:
      - hosts:
          - ${keycloak_fqdn}
        secretName: dspace-cloud-certificate
  extraEnv: |
    - name: KEYCLOAK_USER
      valueFrom:
        secretKeyRef:
          name: keycloak-secret
          key: username
    - name: KEYCLOAK_PASSWORD
      valueFrom:
        secretKeyRef:
          name: keycloak-secret
          key: password
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"
    - name: KEYCLOAK_IMPORT
      value: /realm/realmData.json
    - name: DB_VENDOR
      value: postgres
    - name: DB_ADDR
      value: ${keycloak_db_fqdn}
    - name: DB_PORT
      value: "5432"
    - name: DB_DATABASE
      value: ${keycloak_db_name}
    - name: DB_USER
      valueFrom:
        secretKeyRef:
          name: simphera-postgresql-credentials
          key: postgresql-username
    - name: DB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: simphera-postgresql-credentials
          key: postgresql-password
simphera:
  default:
    ingress:
      tls:
        secretName: dspace-cloud-certificate
  hostname: ${simphera_fqdn}
  postgresql:
    host: ${simphera_db_fqdn}
    database:
      name: ${simphera_db_name}
    certificate: 
      secretName: customsslrootcertificate
      subpath: databaseCertificates.pem
  ivs:
    apiUrl: https://www.example.org
    storageIds: null  
  codemeter:
    server: ${license_server_fqdn}
  scenarioexecutorlinux:
    statefulSet:
      replicas: 1
    nodeSelector:
      kubernetes.io/os: linux
      purpose: execution
    tolerations:
      - key: "purpose"
        operator: "Equal"
        value: "execution"
        effect: "NoSchedule"
  itcexecutorlinux:
    replicas: 1    
mqtt:
  hostname: ${simphera_fqdn}
  ingress:
    tls:
      secretName: dspace-cloud-certificate